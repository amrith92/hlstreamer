/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "hlserver_types.h"

#include <algorithm>

namespace hlserver {

int _kJobTypeValues[] = {
  JobType::ON_DEMAND,
  JobType::LIVE_STREAM,
  JobType::SCHEDULING
};
const char* _kJobTypeNames[] = {
  "ON_DEMAND",
  "LIVE_STREAM",
  "SCHEDULING"
};
const std::map<int, const char*> _JobType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kJobTypeValues, _kJobTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kJobStatusTypeValues[] = {
  JobStatusType::INVALID,
  JobStatusType::ACCEPTED,
  JobStatusType::IN_PROGRESS,
  JobStatusType::FINISHED,
  JobStatusType::ERROR
};
const char* _kJobStatusTypeNames[] = {
  "INVALID",
  "ACCEPTED",
  "IN_PROGRESS",
  "FINISHED",
  "ERROR"
};
const std::map<int, const char*> _JobStatusType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kJobStatusTypeValues, _kJobStatusTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


Job::~Job() throw() {
}


void Job::__set_id(const int64_t val) {
  id = val;
}

void Job::__set_type(const JobType::type val) {
  type = val;
}

const char* Job::ascii_fingerprint = "DFA40D9D2884599F3D1E7A57578F1384";
const uint8_t Job::binary_fingerprint[16] = {0xDF,0xA4,0x0D,0x9D,0x28,0x84,0x59,0x9F,0x3D,0x1E,0x7A,0x57,0x57,0x8F,0x13,0x84};

uint32_t Job::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type = (JobType::type)ecast0;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Job::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Job");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Job &a, Job &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

Job::Job(const Job& other1) {
  id = other1.id;
  type = other1.type;
}
Job& Job::operator=(const Job& other2) {
  id = other2.id;
  type = other2.type;
  return *this;
}

JobStatus::~JobStatus() throw() {
}


void JobStatus::__set_type(const JobStatusType::type val) {
  type = val;
}

void JobStatus::__set_jobId(const int64_t val) {
  jobId = val;
}

void JobStatus::__set_message(const std::string& val) {
  message = val;
__isset.message = true;
}

const char* JobStatus::ascii_fingerprint = "5903DB663ABC109180254BE53D624B46";
const uint8_t JobStatus::binary_fingerprint[16] = {0x59,0x03,0xDB,0x66,0x3A,0xBC,0x10,0x91,0x80,0x25,0x4B,0xE5,0x3D,0x62,0x4B,0x46};

uint32_t JobStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->type = (JobStatusType::type)ecast3;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->jobId);
          this->__isset.jobId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t JobStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("JobStatus");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jobId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->jobId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(JobStatus &a, JobStatus &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.jobId, b.jobId);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

JobStatus::JobStatus(const JobStatus& other4) {
  type = other4.type;
  jobId = other4.jobId;
  message = other4.message;
}
JobStatus& JobStatus::operator=(const JobStatus& other5) {
  type = other5.type;
  jobId = other5.jobId;
  message = other5.message;
  return *this;
}

TranscodingError::~TranscodingError() throw() {
}


void TranscodingError::__set_code(const int32_t val) {
  code = val;
}

void TranscodingError::__set_what(const std::string& val) {
  what = val;
}

const char* TranscodingError::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t TranscodingError::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t TranscodingError::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->what);
          this->__isset.what = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TranscodingError::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TranscodingError");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("what", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->what);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TranscodingError &a, TranscodingError &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.what, b.what);
  swap(a.__isset, b.__isset);
}

TranscodingError::TranscodingError(const TranscodingError& other6) {
  code = other6.code;
  what = other6.what;
}
TranscodingError& TranscodingError::operator=(const TranscodingError& other7) {
  code = other7.code;
  what = other7.what;
  return *this;
}

JobError::~JobError() throw() {
}


void JobError::__set_jobId(const int64_t val) {
  jobId = val;
}

void JobError::__set_what(const std::string& val) {
  what = val;
}

const char* JobError::ascii_fingerprint = "727CAEA8265A5DE67DBC931F55CD8753";
const uint8_t JobError::binary_fingerprint[16] = {0x72,0x7C,0xAE,0xA8,0x26,0x5A,0x5D,0xE6,0x7D,0xBC,0x93,0x1F,0x55,0xCD,0x87,0x53};

uint32_t JobError::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->jobId);
          this->__isset.jobId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->what);
          this->__isset.what = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t JobError::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("JobError");

  xfer += oprot->writeFieldBegin("jobId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->jobId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("what", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->what);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(JobError &a, JobError &b) {
  using ::std::swap;
  swap(a.jobId, b.jobId);
  swap(a.what, b.what);
  swap(a.__isset, b.__isset);
}

JobError::JobError(const JobError& other8) {
  jobId = other8.jobId;
  what = other8.what;
}
JobError& JobError::operator=(const JobError& other9) {
  jobId = other9.jobId;
  what = other9.what;
  return *this;
}
} // namespace
