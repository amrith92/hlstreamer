/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "hlserver_types.h"

#include <algorithm>

namespace hlserver {

int _kJobTypeValues[] = {
  JobType::ON_DEMAND,
  JobType::LIVE_STREAM,
  JobType::SCHEDULING
};
const char* _kJobTypeNames[] = {
  "ON_DEMAND",
  "LIVE_STREAM",
  "SCHEDULING"
};
const std::map<int, const char*> _JobType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kJobTypeValues, _kJobTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kJobStatusTypeValues[] = {
  JobStatusType::INVALID,
  JobStatusType::ACCEPTED,
  JobStatusType::IN_PROGRESS,
  JobStatusType::FINISHED,
  JobStatusType::ERROR
};
const char* _kJobStatusTypeNames[] = {
  "INVALID",
  "ACCEPTED",
  "IN_PROGRESS",
  "FINISHED",
  "ERROR"
};
const std::map<int, const char*> _JobStatusType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kJobStatusTypeValues, _kJobStatusTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


VideoProperties::~VideoProperties() throw() {
}


void VideoProperties::__set_width(const int16_t val) {
  width = val;
}

void VideoProperties::__set_height(const int16_t val) {
  height = val;
}

void VideoProperties::__set_keyInterval(const i8 val) {
  keyInterval = val;
}

void VideoProperties::__set_bitrate(const int16_t val) {
  bitrate = val;
}

void VideoProperties::__set_framerate(const int16_t val) {
  framerate = val;
}

void VideoProperties::__set_noiseReduction(const i8 val) {
  noiseReduction = val;
}

const char* VideoProperties::ascii_fingerprint = "702A300A7FCCFAD34992E0E52FD1FA78";
const uint8_t VideoProperties::binary_fingerprint[16] = {0x70,0x2A,0x30,0x0A,0x7F,0xCC,0xFA,0xD3,0x49,0x92,0xE0,0xE5,0x2F,0xD1,0xFA,0x78};

uint32_t VideoProperties::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->width);
          this->__isset.width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->height);
          this->__isset.height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->keyInterval);
          this->__isset.keyInterval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->bitrate);
          this->__isset.bitrate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->framerate);
          this->__isset.framerate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->noiseReduction);
          this->__isset.noiseReduction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VideoProperties::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VideoProperties");

  xfer += oprot->writeFieldBegin("width", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("height", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->height);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keyInterval", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->keyInterval);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bitrate", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->bitrate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("framerate", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->framerate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("noiseReduction", ::apache::thrift::protocol::T_BYTE, 6);
  xfer += oprot->writeByte(this->noiseReduction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VideoProperties &a, VideoProperties &b) {
  using ::std::swap;
  swap(a.width, b.width);
  swap(a.height, b.height);
  swap(a.keyInterval, b.keyInterval);
  swap(a.bitrate, b.bitrate);
  swap(a.framerate, b.framerate);
  swap(a.noiseReduction, b.noiseReduction);
  swap(a.__isset, b.__isset);
}

VideoProperties::VideoProperties(const VideoProperties& other0) {
  width = other0.width;
  height = other0.height;
  keyInterval = other0.keyInterval;
  bitrate = other0.bitrate;
  framerate = other0.framerate;
  noiseReduction = other0.noiseReduction;
}
VideoProperties& VideoProperties::operator=(const VideoProperties& other1) {
  width = other1.width;
  height = other1.height;
  keyInterval = other1.keyInterval;
  bitrate = other1.bitrate;
  framerate = other1.framerate;
  noiseReduction = other1.noiseReduction;
  return *this;
}

AudioProperties::~AudioProperties() throw() {
}


void AudioProperties::__set_bitrate(const int16_t val) {
  bitrate = val;
}

void AudioProperties::__set_channels(const i8 val) {
  channels = val;
}

const char* AudioProperties::ascii_fingerprint = "2F32B8B152B4427223DB9D670291659B";
const uint8_t AudioProperties::binary_fingerprint[16] = {0x2F,0x32,0xB8,0xB1,0x52,0xB4,0x42,0x72,0x23,0xDB,0x9D,0x67,0x02,0x91,0x65,0x9B};

uint32_t AudioProperties::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->bitrate);
          this->__isset.bitrate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->channels);
          this->__isset.channels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AudioProperties::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AudioProperties");

  xfer += oprot->writeFieldBegin("bitrate", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->bitrate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channels", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->channels);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AudioProperties &a, AudioProperties &b) {
  using ::std::swap;
  swap(a.bitrate, b.bitrate);
  swap(a.channels, b.channels);
  swap(a.__isset, b.__isset);
}

AudioProperties::AudioProperties(const AudioProperties& other2) {
  bitrate = other2.bitrate;
  channels = other2.channels;
}
AudioProperties& AudioProperties::operator=(const AudioProperties& other3) {
  bitrate = other3.bitrate;
  channels = other3.channels;
  return *this;
}

Properties::~Properties() throw() {
}


void Properties::__set_inFile(const std::string& val) {
  inFile = val;
}

void Properties::__set_baseUri(const std::string& val) {
  baseUri = val;
}

void Properties::__set_video(const VideoProperties& val) {
  video = val;
}

void Properties::__set_audio(const AudioProperties& val) {
  audio = val;
}

const char* Properties::ascii_fingerprint = "81AB8A960ED2C0E3679A7B9DA5240FB3";
const uint8_t Properties::binary_fingerprint[16] = {0x81,0xAB,0x8A,0x96,0x0E,0xD2,0xC0,0xE3,0x67,0x9A,0x7B,0x9D,0xA5,0x24,0x0F,0xB3};

uint32_t Properties::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->inFile);
          this->__isset.inFile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->baseUri);
          this->__isset.baseUri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->video.read(iprot);
          this->__isset.video = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->audio.read(iprot);
          this->__isset.audio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Properties::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Properties");

  xfer += oprot->writeFieldBegin("inFile", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->inFile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("baseUri", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->baseUri);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("video", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->video.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("audio", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->audio.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Properties &a, Properties &b) {
  using ::std::swap;
  swap(a.inFile, b.inFile);
  swap(a.baseUri, b.baseUri);
  swap(a.video, b.video);
  swap(a.audio, b.audio);
  swap(a.__isset, b.__isset);
}

Properties::Properties(const Properties& other4) {
  inFile = other4.inFile;
  baseUri = other4.baseUri;
  video = other4.video;
  audio = other4.audio;
}
Properties& Properties::operator=(const Properties& other5) {
  inFile = other5.inFile;
  baseUri = other5.baseUri;
  video = other5.video;
  audio = other5.audio;
  return *this;
}

Job::~Job() throw() {
}


void Job::__set_id(const int64_t val) {
  id = val;
}

void Job::__set_type(const JobType::type val) {
  type = val;
}

const char* Job::ascii_fingerprint = "DFA40D9D2884599F3D1E7A57578F1384";
const uint8_t Job::binary_fingerprint[16] = {0xDF,0xA4,0x0D,0x9D,0x28,0x84,0x59,0x9F,0x3D,0x1E,0x7A,0x57,0x57,0x8F,0x13,0x84};

uint32_t Job::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast6;
          xfer += iprot->readI32(ecast6);
          this->type = (JobType::type)ecast6;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Job::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Job");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Job &a, Job &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

Job::Job(const Job& other7) {
  id = other7.id;
  type = other7.type;
}
Job& Job::operator=(const Job& other8) {
  id = other8.id;
  type = other8.type;
  return *this;
}

JobStatus::~JobStatus() throw() {
}


void JobStatus::__set_type(const JobStatusType::type val) {
  type = val;
}

void JobStatus::__set_jobId(const int64_t val) {
  jobId = val;
}

void JobStatus::__set_message(const std::string& val) {
  message = val;
__isset.message = true;
}

const char* JobStatus::ascii_fingerprint = "5903DB663ABC109180254BE53D624B46";
const uint8_t JobStatus::binary_fingerprint[16] = {0x59,0x03,0xDB,0x66,0x3A,0xBC,0x10,0x91,0x80,0x25,0x4B,0xE5,0x3D,0x62,0x4B,0x46};

uint32_t JobStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast9;
          xfer += iprot->readI32(ecast9);
          this->type = (JobStatusType::type)ecast9;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->jobId);
          this->__isset.jobId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t JobStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("JobStatus");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jobId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->jobId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(JobStatus &a, JobStatus &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.jobId, b.jobId);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

JobStatus::JobStatus(const JobStatus& other10) {
  type = other10.type;
  jobId = other10.jobId;
  message = other10.message;
}
JobStatus& JobStatus::operator=(const JobStatus& other11) {
  type = other11.type;
  jobId = other11.jobId;
  message = other11.message;
  return *this;
}

TranscodingError::~TranscodingError() throw() {
}


void TranscodingError::__set_code(const int32_t val) {
  code = val;
}

void TranscodingError::__set_what(const std::string& val) {
  what = val;
}

const char* TranscodingError::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t TranscodingError::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t TranscodingError::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->what);
          this->__isset.what = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TranscodingError::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TranscodingError");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("what", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->what);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TranscodingError &a, TranscodingError &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.what, b.what);
  swap(a.__isset, b.__isset);
}

TranscodingError::TranscodingError(const TranscodingError& other12) {
  code = other12.code;
  what = other12.what;
}
TranscodingError& TranscodingError::operator=(const TranscodingError& other13) {
  code = other13.code;
  what = other13.what;
  return *this;
}
} // namespace
